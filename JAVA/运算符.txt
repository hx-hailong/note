算数运算符
	+（正数、加法、连接符）
	-
	×
	/
	%（取模，即取余数）
	++（自增）
	--（自减）

后自增（减）在JVM中运行原理：
   JVM会先声明一个变量用于保存没有自增（减）之前的值，
   eg:	int i = 0;
	i++;
   原理：
	int temp = i; // temp = 0;
	i = i + 1;	//i = 1;
	return temp	//把temp的值给返回到表达式的结果

注意事项：
1、任意类型的数据与字符串使用连接符"+"连接，那么结果都是字符串类型的数据
   eg:	System.out.println(1 + 2 + "hello" + 3 + 4);	//输出结果为3hello34
2、做取模运算时，结果的正负号是取决于被除数
   eg:	System.out.println(10%3);	//输出结果为1
	System.out.println(10%-3);	//输出结果为1
	System.out.println(-10%3);	//输出结果为-1
	System.out.println(-10%-3);	//输出结果为-1
3、自增（减）
   前自增（减）：++i --i
	先自增（减），后使用
   后自增（减）：i++ i--
	先使用，后自增（减）
   eg:	int i = 0;
	i = i++;
	System.out.println("i= " + i);     //输出结果为0


移位运算符：
	<<（左移）
	>>（右移）
	>>>（无符号右移）


<<（左移）
	一个操作数进行左移运算时，结果就是操作数乘以2的n次方，n就是左移的位数
	eg:	3<<1	//结果为6
		3<<2	//结果为12
		3<<3	//结果为24

>>（右移）
	一个操作数在做右移运算时，结果就是该操作数除于2的n次方，n就是右移的位数
	eg:	3>>1	//结果为1
		3>>2	//结果为0

>>>（无符号右移）
	如果操作数是一个正数时，那么右移时，不论操作数是正数还是负数，统一使用0补齐
	而右移的规则是：若操作数是正数，那么左边的空缺位使用0来补齐来；若操作数是负数时，那么左边的空缺位使用1来补齐

笔试题目：使用最高的效率算出2乘以8 的结果
	System.out.println(2<<3);


三元运算符（三目运算符）
格式：	布尔表达式?值1:值2
eg:	age>18?"成年人":"未成年人"
